from src.core.utils.subtitles_lister import subtitles_parse_output
from src.core.dataclass.subtitle import Subtitles


def test_subtitles_parse_output_parses_realistic_sample():
    output_lines = [
        "[info] Available automatic captions for dQw4w9WgXcQ: ",
        "Language       Name                    Formats",
        "en-en          English from English    vtt srt ttml",
        "ru-en          Russian from English    vtt srt",
        "",
        "[info] Available subtitles for dQw4w9WgXcQ: ",
        "Language       Name                    Formats",
        "en             English                 vtt srt ttml",
        "de-DE          German (Germany)        vtt srt",
        "es-419         Spanish (Latin America)  vtt srt ttml srv3",
        "",
        "some unrelated line"
    ]

    result = subtitles_parse_output(output_lines)

    assert isinstance(result, Subtitles)
    assert len(result.autogenerated_subtitles) == 2
    assert len(result.subtitles) == 3

    auto = result.autogenerated_subtitles[0]
    assert auto["Language"] == "en-en"
    assert auto["Name"] == "English from English"
    assert auto["Formats"] == "vtt srt ttml"

    auto2 = result.autogenerated_subtitles[1]
    assert auto2["Language"] == "ru-en"
    assert auto2["Name"] == "Russian from English"
    assert auto2["Formats"] == "vtt srt"

    avail = result.subtitles[0]
    assert avail["Language"] == "en"
    assert avail["Name"] == "English"
    assert avail["Formats"] == "vtt srt ttml"

    avail2 = result.subtitles[1]
    assert avail2["Language"] == "de-DE"
    assert avail2["Name"] == "German (Germany)"
    assert avail2["Formats"] == "vtt srt"

    avail3 = result.subtitles[2]
    assert avail3["Language"] == "es-419"
    assert avail3["Name"] == "Spanish (Latin America)"
    assert avail3["Formats"] == "vtt srt ttml srv3"


def test_subtitles_parse_output_handles_names_with_spaces():
    output_lines = [
        "[info] Available subtitles for test: ",
        "Language Name                    Formats",
        "fr-FR    French (France)         vtt srt",
        "zh-Hans  Chinese (Simplified)    vtt srt ttml",
        "pt-PT    Portuguese (Portugal)   vtt"
    ]

    result = subtitles_parse_output(output_lines)

    assert len(result.subtitles) == 3
    assert result.subtitles[0]["Language"] == "fr-FR"
    assert result.subtitles[0]["Name"] == "French (France)"
    assert result.subtitles[0]["Formats"] == "vtt srt"

    assert result.subtitles[1]["Name"] == "Chinese (Simplified)"
    assert result.subtitles[2]["Name"] == "Portuguese (Portugal)"


def test_subtitles_parse_output_ignores_header_and_stops_at_empty_line():
    output_lines = [
        "[info] Available subtitles for test: ",
        "Language Name Formats",
        "en  English  vtt srt",
        "",
        "ru Russian vtt"
    ]

    result = subtitles_parse_output(output_lines)

    assert len(result.subtitles) == 1
    assert result.subtitles[0]["Language"] == "en"
    assert result.subtitles[0]["Name"] == "English"
    assert result.subtitles[0]["Formats"] == "vtt srt"


def test_subtitles_parse_output_returns_empty_if_prefix_not_found():
    output_lines = ["some random output"]
    result = subtitles_parse_output(output_lines)

    assert len(result.subtitles) == 0
    assert len(result.autogenerated_subtitles) == 0


def test_subtitles_parse_output_skips_lines_before_prefix():
    output_lines = [
        "Downloading...",
        "[info] Available subtitles for test: ",
        "Language Name Formats",
        "en  English  vtt"
    ]

    result = subtitles_parse_output(output_lines)

    assert len(result.subtitles) == 1
    assert result.subtitles[0]["Language"] == "en"


def test_subtitles_parse_output_ignores_empty_or_invalid_lines():
    output_lines = [
        "[info] Available subtitles for test: ",
        "Language Name Formats",
        "en  English  vtt",
    ]

    result = subtitles_parse_output(output_lines)

    assert len(result.subtitles) == 1
    assert result.subtitles[0]["Language"] == "en"


def test_subtitles_parse_output_empty_input():
    result = subtitles_parse_output([])
    assert len(result.subtitles) == 0
    assert len(result.autogenerated_subtitles) == 0
