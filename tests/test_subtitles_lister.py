from unittest.mock import patch

from src.core.data_class.subtitle import Subtitles
from src.utils.subtitles_lister import SubtitlesLister


def test_parse_output_with_realistic_sample():
    lister = SubtitlesLister()
    lister.subtitles_str = [
        "[info] Available automatic captions for dQw4w9WgXcQ: ",
        "Language       Name                    Formats",
        "en-en          English from English    vtt srt ttml",
        "ru-en          Russian from English    vtt srt",
        "",
        "[info] Available subtitles for dQw4w9WgXcQ: ",
        "Language       Name                    Formats",
        "en             English                 vtt srt ttml",
        "de-DE          German (Germany)        vtt srt",
        "es-419         Spanish (Latin America)  vtt srt ttml srv3",
        "",
        "some unrelated line"
    ]

    result = lister._parse_output()

    assert isinstance(result, Subtitles)
    assert len(result.autogenerated_subtitles) == 2
    assert len(result.subtitles) == 3

    auto = result.autogenerated_subtitles[0]
    assert auto["Language"] == "en-en"
    assert auto["Name"] == "English from English"
    assert auto["Formats"] == "vtt srt ttml"

    avail = result.subtitles[1]
    assert avail["Language"] == "de-DE"
    assert avail["Name"] == "German (Germany)"
    assert avail["Formats"] == "vtt srt"

    last = result.subtitles[2]
    assert last["Language"] == "es-419"
    assert last["Name"] == "Spanish (Latin America)"
    assert last["Formats"] == "vtt srt ttml srv3"


def test_get_subtitles_handles_names_with_spaces():
    lister = SubtitlesLister()
    lister.subtitles_str = [
        "[info] Available subtitles for test: ",
        "Language Name                    Formats",
        "fr-FR    French (France)         vtt srt",
        "zh-Hans  Chinese (Simplified)    vtt srt ttml",
        "pt-PT    Portuguese (Portugal)   vtt"
    ]

    subs = lister._get_subtitles("[info] Available subtitles for ")

    assert len(subs) == 3
    assert subs[0]["Language"] == "fr-FR"
    assert subs[0]["Name"] == "French (France)"
    assert subs[0]["Formats"] == "vtt srt"

    assert subs[1]["Name"] == "Chinese (Simplified)"
    assert subs[2]["Name"] == "Portuguese (Portugal)"


def test_get_subtitles_ignores_header_and_stops_at_empty_line():
    lister = SubtitlesLister()
    lister.subtitles_str = [
        "[info] Available subtitles for test: ",
        "Language Name Formats",
        "en  English  vtt srt",
        "",  # ← парсинг должен остановиться здесь
        "ru Russian vtt"
    ]

    subs = lister._get_subtitles("[info] Available subtitles for ")
    assert len(subs) == 1
    assert subs[0]["Language"] == "en"


def test_get_subtitles_returns_empty_if_prefix_not_found():
    lister = SubtitlesLister()
    lister.subtitles_str = ["some random output"]
    subs = lister._get_subtitles("[info] Available subtitles for ")
    assert subs == []


def test_get_subtitles_skips_lines_before_prefix():
    lister = SubtitlesLister()
    lister.subtitles_str = [
        "Downloading...",
        "[info] Available subtitles for test: ",
        "Language Name Formats",
        "en  English  vtt"
    ]
    subs = lister._get_subtitles("[info] Available subtitles for ")
    assert len(subs) == 1


def test_full_integration_mocked_run():
    with patch.object(SubtitlesLister, '_parse_output') as mock_parse:
        mock_parse.return_value = Subtitles(subtitles=[], autogenerated_subtitles=[])
        lister = SubtitlesLister()

        with patch.object(lister.runner, 'run') as mock_run:
            mock_run.return_value = {'return_code': 0, 'stderr': []}
            result = lister.get_subtitles("https://example.com")

        mock_run.assert_called_once()
        assert result == Subtitles(subtitles=[], autogenerated_subtitles=[])